// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SwiftUIPathway
import Alamofire
import AppsFlyerLib
import Combine
import DeveloperToolsSupport
import Factory
import Foundation
import Swift
import SwiftUI
@_exported import SwiftUIPathway
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Log {
  public enum LogLevel {
    case debug
    case warning
    case error
    public static func == (a: SwiftUIPathway.Log.LogLevel, b: SwiftUIPathway.Log.LogLevel) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func d(_ items: Any..., shouldLogContext: Swift.Bool = true, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func w(_ items: Any..., shouldLogContext: Swift.Bool = true, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func e(_ items: Any..., shouldLogContext: Swift.Bool = true, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
}
public struct Fonts {
  public struct Helvetica {
    public static let regular: Swift.String
    public static let bold: Swift.String
    public static let medium: Swift.String
  }
  public struct Roboto {
    public static let regular: Swift.String
    public static let bold: Swift.String
    public static let medium: Swift.String
  }
  public struct IndieFlower {
    public static let regular: Swift.String
  }
  public struct Mallanna {
    public static let regular: Swift.String
  }
}
public struct ValidationError : Swift.Equatable {
  public let key: Swift.String
  public let messages: [Swift.String]
  public init(key: Swift.String, messages: [Swift.String])
  public static func == (a: SwiftUIPathway.ValidationError, b: SwiftUIPathway.ValidationError) -> Swift.Bool
}
public enum ErrorType : Swift.Equatable {
  case serverNotResponding
  case serverNotFound
  case requestTimedOut
  case noInternet
  case authentication
  case authorization
  case defaultsNotLoaded
  case serverError
  case encodeFailed
  case decodeFailed
  case custom
  case unknown
  public var isNetworkError: Swift.Bool {
    get
  }
  public var isApplicationError: Swift.Bool {
    get
  }
  public var isBackendError: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUIPathway.ErrorType, b: SwiftUIPathway.ErrorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ErrorModel : Swift.Equatable {
  public let type: SwiftUIPathway.ErrorType
  public var message: Swift.String
  public var code: Swift.String
  public var errors: [SwiftUIPathway.ValidationError]
  public init(type: SwiftUIPathway.ErrorType, message: Swift.String, code: Swift.String = "", errors: [SwiftUIPathway.ValidationError] = [])
  public var fullMessage: Swift.String {
    get
  }
  public static func == (a: SwiftUIPathway.ErrorModel, b: SwiftUIPathway.ErrorModel) -> Swift.Bool
}
extension SwiftUIPathway.ErrorModel {
  public init(type: SwiftUIPathway.ErrorType)
}
public protocol RouteProtocol : Swift.Hashable, Swift.Identifiable {
  associatedtype RouteView : SwiftUI.View
  var destination: Self.RouteView { get }
}
extension SwiftUIPathway.RouteProtocol {
  public func hash(into hasher: inout Swift.Hasher)
  public var id: Swift.Int {
    get
  }
}
public protocol FullScreenRouteProtocol : SwiftUIPathway.RouteProtocol {
}
public protocol NavigationStateProtocol {
  func popToSelf(refresh: Swift.Bool)
  func navigate(_ route: any SwiftUIPathway.RouteProtocol)
}
public protocol FullScreenNavStateProtocol {
  func dismissChild(refresh: Swift.Bool)
  func navigateFullScreen(_ route: any SwiftUIPathway.RouteProtocol)
}
public class NavigationState<T> : Foundation.ObservableObject, SwiftUIPathway.NavigationStateProtocol, SwiftUIPathway.FullScreenNavStateProtocol where T : SwiftUIPathway.RouteProtocol {
  @Combine.Published @_projectedValueProperty($selectedRoute) public var selectedRoute: T? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $selectedRoute: Combine.Published<T?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($shouldNavigate) public var shouldNavigate: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $shouldNavigate: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectedFullScreenRoute) public var selectedFullScreenRoute: T? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $selectedFullScreenRoute: Combine.Published<T?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($shouldRefresh) public var shouldRefresh: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $shouldRefresh: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(selectedRoute: T? = nil, shouldNavigate: Swift.Bool = false, selectedFullScreenRoute: T? = nil, shouldRefresh: Swift.Bool = false)
  public func navigate(_ route: any SwiftUIPathway.RouteProtocol)
  public func navigate(_ route: T)
  public func navigateFullScreen(_ route: any SwiftUIPathway.RouteProtocol)
  public func popToSelf(refresh: Swift.Bool)
  public func dismissChild(refresh: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum EmptyRoute : SwiftUIPathway.RouteProtocol {
  case `default`
  public var destination: SwiftUI.AnyView {
    get
  }
  public static func == (a: SwiftUIPathway.EmptyRoute, b: SwiftUIPathway.EmptyRoute) -> Swift.Bool
  public typealias ID = Swift.Int
  public typealias RouteView = SwiftUI.AnyView
  public var hashValue: Swift.Int {
    get
  }
}
public typealias DefaultNavigationState = SwiftUIPathway.NavigationState<SwiftUIPathway.EmptyRoute>
public protocol BaseRouter {
  var baseURL: Swift.String { get }
  var path: Swift.String { get }
  var method: Alamofire.HTTPMethod { get }
  var encoder: any Alamofire.ParameterEncoder { get }
}
extension SwiftUIPathway.ErrorType {
  public var message: Swift.String {
    get
  }
}
public struct ErrorMapper<Success, Failure> where Failure : Swift.Error {
  public init(response: Alamofire.DataResponse<Success, Failure>, error: (any Swift.Error)? = nil, errorType: SwiftUIPathway.ErrorType? = nil)
  public func mapToDomain() -> SwiftUIPathway.ErrorModel
}
@_hasMissingDesignatedInitializers public class ErrorResponseSerializer : Alamofire.ResponseSerializer {
  public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> SwiftUIPathway.ErrorModel
  public typealias SerializedObject = SwiftUIPathway.ErrorModel
  @objc deinit
}
public struct NavScreen<NavBar, Content> : SwiftUI.View where NavBar : SwiftUI.View, Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway9NavScreenV4bodyQrvp", 0) __<NavBar, Content>
}
extension SwiftUI.Color {
  public init(hex: Swift.String)
}
public struct RoundedCorner : SwiftUI.Shape {
  public var radius: CoreFoundation.CGFloat
  public var corners: UIKit.UIRectCorner
  public func path(in rect: CoreFoundation.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUIPathway.RoundedCorner, SwiftUI.ForegroundStyle>
}
extension SwiftUI.View {
  public func eraseToAnyView() -> SwiftUI.AnyView
  public func roundedCorner(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUI.View
  
}
@_hasMissingDesignatedInitializers public class CommonImageProvider {
  public static func image(named: Swift.String) -> UIKit.UIImage
  public static func image(named: Swift.String) -> SwiftUI.Image
  @objc deinit
}
public class SwiftUIPathwayInit {
  public init()
  public func initialized()
  @objc deinit
}
public protocol Analytics {
  func logEvent(name: Swift.String, attributes: [Swift.String : Swift.String])
  func logError(request: Foundation.URLRequest, message: Swift.String)
}
public struct AppNavView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init<T>(navigationState: SwiftUIPathway.NavigationState<T>, bottomPadding: CoreFoundation.CGFloat = 20, @SwiftUI.ViewBuilder content: () -> Content) where T : SwiftUIPathway.RouteProtocol
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway10AppNavViewV4bodyQrvp", 0) __<Content>
}
@_Concurrency.MainActor(unsafe) public struct CustomNavView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init<T>(navigationState: SwiftUIPathway.NavigationState<T>, @SwiftUI.ViewBuilder content: () -> Content) where T : SwiftUIPathway.RouteProtocol
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway13CustomNavViewV4bodyQrvp", 0) __<Content>
}
public struct CustomDivider : SwiftUI.View {
  public init(type: SwiftUIPathway.DividerStyle, color: SwiftUI.Color, alignment: SwiftUIPathway.CustomDivider.AlignmentAxis = .horizontal)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public enum AlignmentAxis {
    case horizontal
    case vertical
    public static func == (a: SwiftUIPathway.CustomDivider.AlignmentAxis, b: SwiftUIPathway.CustomDivider.AlignmentAxis) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway13CustomDividerV4bodyQrvp", 0) __
}
public enum DividerStyle {
  case line
  case normalDash
  case roudedDash
  public static func == (a: SwiftUIPathway.DividerStyle, b: SwiftUIPathway.DividerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Line : SwiftUI.Shape {
  public init()
  public func path(in rect: CoreFoundation.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUIPathway.Line, SwiftUI.ForegroundStyle>
}
public struct VDottedLine : SwiftUI.Shape {
  public init()
  public func path(in rect: CoreFoundation.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<SwiftUIPathway.VDottedLine, SwiftUI.ForegroundStyle>
}
public struct VerticalDottedLine : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway18VerticalDottedLineV4bodyQrvp", 0) __
}
public struct Colors {
  public struct Primary {
    public static let solidGreen: SwiftUI.Color
    public static let solidBlue: SwiftUI.Color
    public static let charcoalGrey: SwiftUI.Color
    public static let solidWhite: SwiftUI.Color
    public static let grey100: SwiftUI.Color
    public static let solidBlack: SwiftUI.Color
    public static let solidOrange: SwiftUI.Color
    public static let background: SwiftUI.Color
    public static let loadingBackground: SwiftUI.Color
    public static let cardBackground: SwiftUI.Color
    public static let background2: SwiftUI.Color
    public static let blueViolet: SwiftUI.Color
    public static let tiffanyblue: SwiftUI.Color
  }
  public struct Secondary {
    public static let solidPink: SwiftUI.Color
    public static let mediumPink: SwiftUI.Color
    public static let lightPing: SwiftUI.Color
    public static let solidBrown: SwiftUI.Color
    public static let solidOrange: SwiftUI.Color
    public static let solidYellow: SwiftUI.Color
    public static let marineBlue: SwiftUI.Color
    public static let slateViolet: SwiftUI.Color
    public static let lightSkyBlue: SwiftUI.Color
    public static let steelTeal: SwiftUI.Color
    public static let pistachioGreen: SwiftUI.Color
    public static let silverGrey: SwiftUI.Color
    public static let darker: SwiftUI.Color
    public static let indicatorBackground: SwiftUI.Color
    public static let electricViolet: SwiftUI.Color
    public static let yellowOrange: SwiftUI.Color
    public static let papayaWhip: SwiftUI.Color
    public static let titanWhite: SwiftUI.Color
  }
  public struct Tertiary {
    public static let pastelOrange: SwiftUI.Color
    public static let pastelPink: SwiftUI.Color
    public static let pastelLightPink: SwiftUI.Color
    public static let pastelViolet: SwiftUI.Color
    public static let pastelGreen: SwiftUI.Color
    public static let pastelGray: SwiftUI.Color
    public static let pastelWhite: SwiftUI.Color
    public static let pastelLightGray: SwiftUI.Color
    public static let pastelAlabaster: SwiftUI.Color
    public static let pasteElectriclViolet: SwiftUI.Color
    public static let desclaimerBackgroundColor: SwiftUI.Color
  }
  public struct Text {
    public static let solidBlue: SwiftUI.Color
    public static let solidRed: SwiftUI.Color
    public static let grey500: SwiftUI.Color
    public static let grey400: SwiftUI.Color
    public static let grey300: SwiftUI.Color
    public static let grey200: SwiftUI.Color
    public static let grey100: SwiftUI.Color
    public static let solidWhite: SwiftUI.Color
    public static let success: SwiftUI.Color
    public static let solidOrange: SwiftUI.Color
    public static let progressBackground: SwiftUI.Color
  }
  public struct AlertsAndFeedback {
    public static let solidRed: SwiftUI.Color
    public static let solidOrange: SwiftUI.Color
    public static let solidLemonGreen: SwiftUI.Color
    public static let darkSkyBlue: SwiftUI.Color
    public static let lightBlue: SwiftUI.Color
    public static let darkOrange: SwiftUI.Color
  }
  public struct Border {
    public static let borderDark: SwiftUI.Color
    public static let borderLight: SwiftUI.Color
    public static let borderActive: SwiftUI.Color
    public static let borderError: SwiftUI.Color
    public static let borderFilled: SwiftUI.Color
    public static let borderExtraLight: SwiftUI.Color
  }
  public struct NavigationBar {
    public static let lightBlueBackground: SwiftUI.Color
    public static let white: SwiftUI.Color
  }
}
@available(iOS 13, macCatalyst 13, tvOS 13, watchOS 6, *)
public struct ScaledFont : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: SwiftUIPathway.ScaledFont.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway10ScaledFontV4body7contentQr0A2UI21_ViewModifier_ContentVyACG_tF", 0) __
}
@available(iOS 13, macCatalyst 13, tvOS 13, watchOS 6, *)
extension SwiftUI.View {
  public func scaledFont(_ name: Swift.String, size: Swift.Double, weight: SwiftUI.Font.Weight? = nil) -> some SwiftUI.View
  
}
public struct ResponseDto<DataDto> : Swift.Decodable where DataDto : Swift.Decodable {
  public let data: DataDto
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResponseResultDto<DataDto> : Swift.Decodable where DataDto : Swift.Decodable {
  public let data: SwiftUIPathway.ResponseResultDto<DataDto>.Result
  public struct Result : Swift.Decodable {
    public let result: DataDto
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OptionalResponseDto<DataDto> : Swift.Decodable where DataDto : Swift.Decodable {
  @SwiftUIPathway.StringForcible public var code: Swift.String? {
    get
    set
    _modify
  }
  @SwiftUIPathway.StringForcible public var status: Swift.String? {
    get
    set
    _modify
  }
  public let message: Swift.String?
  public let data: DataDto?
  public init(from decoder: any Swift.Decoder) throws
}
public struct EmptyResponseDto : Swift.Decodable {
  @SwiftUIPathway.StringForcible public var code: Swift.String? {
    get
    set
    _modify
  }
  @SwiftUIPathway.StringForcible public var status: Swift.String? {
    get
    set
    _modify
  }
  public let message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor public class NavViewState : Foundation.ObservableObject {
  @_Concurrency.MainActor public init<T>(_ navigationState: SwiftUIPathway.NavigationState<T>) where T : SwiftUIPathway.RouteProtocol
  @_Concurrency.MainActor public func popToRoot(refresh: Swift.Bool = false)
  @_Concurrency.MainActor public func popToRoot(navigate route: any SwiftUIPathway.RouteProtocol)
  @_Concurrency.MainActor public func addMarker<T>(_ state: SwiftUIPathway.NavigationState<T>) where T : SwiftUIPathway.RouteProtocol
  @_Concurrency.MainActor public func popToMarker(refresh: Swift.Bool = false)
  @_Concurrency.MainActor public func navigateFullScreen(_ route: any SwiftUIPathway.RouteProtocol)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor public class FullScreenState : Foundation.ObservableObject {
  @_Concurrency.MainActor public init<T>(_ navigationState: SwiftUIPathway.NavigationState<T>) where T : SwiftUIPathway.RouteProtocol
  @_Concurrency.MainActor public func dismissChild(refresh: Swift.Bool = false)
  @_Concurrency.MainActor public func replaceChild(route: any SwiftUIPathway.RouteProtocol)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SwiftUI.View {
  @_Concurrency.MainActor public func customFullScreenCover<T>(_ navigationState: SwiftUIPathway.NavigationState<T>) -> some SwiftUI.View where T : SwiftUIPathway.RouteProtocol
  
}
extension SwiftUI.View {
  @_Concurrency.MainActor public func customNavigationDestination<T>(_ navigationState: SwiftUIPathway.NavigationState<T>) -> some SwiftUI.View where T : SwiftUIPathway.RouteProtocol
  
}
public struct LazyView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(_ content: @autoclosure @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: Content {
    get
  }
  public typealias Body = Content
}
extension SwiftUIPathway.NavBar where T == SwiftUI.EmptyView {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder buttonContent: () -> B, @SwiftUI.ViewBuilder bottomContent: () -> E)
}
extension SwiftUIPathway.NavBar where B == SwiftUI.EmptyView {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder titleContent: () -> T, @SwiftUI.ViewBuilder bottomContent: () -> E)
}
extension SwiftUIPathway.NavBar where E == SwiftUI.EmptyView {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder titleContent: () -> T, @SwiftUI.ViewBuilder buttonContent: () -> B)
}
extension SwiftUIPathway.NavBar where T == SwiftUI.EmptyView, B == SwiftUI.EmptyView {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder bottomContent: () -> E)
}
extension SwiftUIPathway.NavBar where T == SwiftUI.EmptyView, E == SwiftUI.EmptyView {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder buttonContent: () -> B)
}
extension SwiftUIPathway.NavBar where B == SwiftUI.EmptyView, E == SwiftUI.EmptyView {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder titleContent: () -> T)
}
extension SwiftUIPathway.NavBar where T == SwiftUI.EmptyView, B == SwiftUI.EmptyView, E == SwiftUI.EmptyView {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil)
}
public protocol ApiSession {
  var accessToken: SwiftUIPathway.AccessToken? { get }
  var trustKitConfig: [Swift.String : Any] { get }
  var tokenRefreshPublisher: SwiftUIPathway.ValuePublisher<SwiftUIPathway.AccessToken> { get }
  var additionalHeaders: [Swift.String : Swift.String] { get }
}
public class ApiManager {
  public init()
  public var session: SwiftUIPathway.NetworkSession {
    get
    set
  }
  public var sessionWithoutInterceptor: SwiftUIPathway.NetworkSession {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers public class NetworkSession : Alamofire.Session {
  override public func request(_ convertible: any Alamofire.URLRequestConvertible, interceptor: (any Alamofire.RequestInterceptor)? = nil) -> Alamofire.DataRequest
  override public init(session: Foundation.URLSession, delegate: Alamofire.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = super, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: (any Alamofire.RequestInterceptor)? = nil, serverTrustManager: Alamofire.ServerTrustManager? = nil, redirectHandler: (any Alamofire.RedirectHandler)? = nil, cachedResponseHandler: (any Alamofire.CachedResponseHandler)? = nil, eventMonitors: [any Alamofire.EventMonitor] = super)
  @objc deinit
}
public enum NavBorder : Swift.Equatable {
  case border(color: SwiftUI.Color)
  case none
  public static func == (a: SwiftUIPathway.NavBorder, b: SwiftUIPathway.NavBorder) -> Swift.Bool
}
public enum NavBarConstants {
  public static let defaultPadding: SwiftUI.EdgeInsets
  public static let defaultMinHeight: CoreFoundation.CGFloat
}
public struct NavBar<T, B, E> : SwiftUI.View where T : SwiftUI.View, B : SwiftUI.View, E : SwiftUI.View {
  public init(title: Swift.String? = nil, showBackButton: Swift.Bool = true, backgroundColor: SwiftUI.Color = .white, padding: SwiftUI.EdgeInsets = NavBarConstants.defaultPadding, border: SwiftUIPathway.NavBorder = .none, backAction: (() -> Swift.Void)? = nil, @SwiftUI.ViewBuilder titleContent: () -> T, @SwiftUI.ViewBuilder buttonContent: () -> B, @SwiftUI.ViewBuilder bottomContent: () -> E)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway6NavBarV4bodyQrvp", 0) __<T, B, E>
}
public struct AccessTokenDto : Swift.Decodable {
  public let tokenType: Swift.String
  public let accessToken: Swift.String
  public let refreshToken: Swift.String
  public let expiresIn: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUIPathway.AccessTokenDto {
  public typealias T = SwiftUIPathway.AccessToken
  public func toDomain() -> SwiftUIPathway.AccessToken
}
public protocol Routable {
  var destination: SwiftUIPathway.Route { get }
}
public struct RouteId : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public let id: Swift.String
  public init(id: Swift.String, tag: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUIPathway.RouteId, rhs: SwiftUIPathway.RouteId) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct Route : Swift.Hashable, Swift.Identifiable {
  public let id: SwiftUIPathway.RouteId
  public let destination: SwiftUIPathway.LazyView<SwiftUI.AnyView>
  public init<V>(destination: V, tag: Swift.String = "") where V : SwiftUI.View
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUIPathway.Route, rhs: SwiftUIPathway.Route) -> Swift.Bool
  public typealias ID = SwiftUIPathway.RouteId
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUIPathway.Route {
  public static func routeId<V>(of type: V.Type, tag: Swift.String = "") -> SwiftUIPathway.RouteId where V : SwiftUI.View
}
extension SwiftUI.View {
  public var routeId: SwiftUIPathway.RouteId {
    get
  }
  public func routeId(tag: Swift.String = "") -> SwiftUIPathway.RouteId
  public func route(tag: Swift.String = "") -> SwiftUIPathway.Route
}
public struct CustomNavLink<Label, Route> : SwiftUI.View where Label : SwiftUI.View, Route : SwiftUIPathway.RouteProtocol {
  public init(isActive: SwiftUI.Binding<Swift.Bool>, route: Route?, @SwiftUI.ViewBuilder label: @escaping () -> Label)
  public init(tag: Swift.String, selection: SwiftUI.Binding<Swift.String?>, route: Route?, @SwiftUI.ViewBuilder label: @escaping () -> Label)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14SwiftUIPathway13CustomNavLinkV4bodyQrvp", 0) __<Label, Route>
}
public typealias ValuePublisher<T> = Combine.AnyPublisher<SwiftUIPathway.ValueResult<T>, Swift.Never>
public typealias CompletionPublisher = Combine.AnyPublisher<SwiftUIPathway.CompletionResult, Swift.Never>
public typealias ProgressPublisher<T> = Combine.AnyPublisher<SwiftUIPathway.ProgressResult<T>, Swift.Never>
public typealias FutureResult<T> = Combine.Future<SwiftUIPathway.ValueResult<T>, Swift.Never>
public enum CompletionResult {
  case success
  case failure(_: SwiftUIPathway.ErrorModel)
}
public enum ValueResult<T> {
  case success(_: T)
  case failure(_: SwiftUIPathway.ErrorModel)
  public var data: T? {
    get
  }
  public func map<U>(_ mapper: (T) -> U) -> SwiftUIPathway.ValueResult<U>
  public var asCompletionResult: SwiftUIPathway.CompletionResult {
    get
  }
}
public enum ProgressResult<T> {
  case success(_: T)
  case inProgress(_: Swift.Float)
  case failure(_: SwiftUIPathway.ErrorModel)
  public var progress: Swift.Float {
    get
  }
}
@propertyWrapper public struct StringForcible : Swift.Codable {
  public var wrappedValue: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init()
}
public struct AccessToken : Swift.Decodable {
  public let tokenType: Swift.String
  public let accessToken: Swift.String
  public let refreshToken: Swift.String
  public let expiresIn: Swift.Int
  public init(tokenType: Swift.String, accessToken: Swift.String, refreshToken: Swift.String, expiresIn: Swift.Int)
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUIPathway.Log.LogLevel : Swift.Equatable {}
extension SwiftUIPathway.Log.LogLevel : Swift.Hashable {}
extension SwiftUIPathway.ErrorType : Swift.Hashable {}
extension SwiftUIPathway.CustomDivider.AlignmentAxis : Swift.Equatable {}
extension SwiftUIPathway.CustomDivider.AlignmentAxis : Swift.Hashable {}
extension SwiftUIPathway.DividerStyle : Swift.Equatable {}
extension SwiftUIPathway.DividerStyle : Swift.Hashable {}
extension SwiftUIPathway.NavViewState : Swift.Sendable {}
extension SwiftUIPathway.FullScreenState : Swift.Sendable {}
